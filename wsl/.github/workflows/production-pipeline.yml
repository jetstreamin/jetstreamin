name: 🚀 Jetstreamin Production Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run production tests every hour
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'
  PRODUCTION_URL: 'https://jetstreamin.io'
  STAGING_URL: 'https://staging.jetstreamin.io'

jobs:
  # Security and dependency scanning
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Audit npm dependencies
        run: npm audit --audit-level=moderate

  # Lint and code quality
  lint:
    name: 🧹 Lint & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npx eslint . --ext .js,.jsx,.ts,.tsx --max-warnings 0

      - name: Run Prettier check
        run: npx prettier --check .

  # Playwright E2E Testing
  test-e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Run Playwright tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          PLAYWRIGHT_BASE_URL: ${{ env.PRODUCTION_URL }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 30

  # Performance testing
  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run performance-specific tests
        run: npm run performance

  # Staging deployment
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan, lint, test-e2e]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3 staging bucket
        run: |
          aws s3 sync . s3://staging-jetstreamin-io/ \
            --exclude ".git/*" \
            --exclude "node_modules/*" \
            --exclude "test-results/*" \
            --delete

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.STAGING_CLOUDFRONT_ID }} \
            --paths "/*"

  # Production deployment
  deploy-production:
    name: 🎯 Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, performance-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Backup current production
        run: |
          aws s3 sync s3://jetstreamin.io/ s3://jetstreamin-io-backup-$(date +%Y%m%d-%H%M%S)/ \
            --exclude "backups/*"

      - name: Deploy to production S3 bucket
        run: |
          aws s3 sync . s3://jetstreamin.io/ \
            --exclude ".git/*" \
            --exclude "node_modules/*" \
            --exclude "test-results/*" \
            --exclude "*.md" \
            --delete

      - name: Invalidate production CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id E33KH3B6II9307 \
            --paths "/*"

      - name: Run post-deployment tests
        run: |
          sleep 30  # Wait for CloudFront invalidation
          npx playwright test --config=playwright.production.config.js
        env:
          PLAYWRIGHT_BASE_URL: ${{ env.PRODUCTION_URL }}

  # Post-deployment monitoring
  post-deploy-monitor:
    name: 📊 Post-Deploy Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run comprehensive production tests
        run: npm run test:production

      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#jetstreamin-deployments'
          text: |
            🚀 Production deployment completed!
            
            🌐 URL: ${{ env.PRODUCTION_URL }}
            📊 Tests: ${{ job.status }}
            🔗 Commit: ${{ github.sha }}
            👤 Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback capability
  rollback:
    name: 🔄 Rollback Production
    runs-on: ubuntu-latest
    if: failure() && needs.deploy-production.result == 'failure'
    needs: [deploy-production]
    environment: production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Find latest backup
        id: backup
        run: |
          LATEST_BACKUP=$(aws s3 ls s3:// --recursive | grep "jetstreamin-io-backup-" | sort | tail -n 1 | awk '{print $4}' | sed 's|/.*||' | sort -u | tail -n 1)
          echo "backup_bucket=$LATEST_BACKUP" >> $GITHUB_OUTPUT

      - name: Restore from backup
        run: |
          aws s3 sync s3://${{ steps.backup.outputs.backup_bucket }}/ s3://jetstreamin.io/ \
            --delete

      - name: Invalidate CloudFront after rollback
        run: |
          aws cloudfront create-invalidation \
            --distribution-id E33KH3B6II9307 \
            --paths "/*"

      - name: Send rollback notification
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          channel: '#jetstreamin-alerts'
          text: |
            🚨 PRODUCTION ROLLBACK EXECUTED
            
            ⚠️ Deployment failed and was rolled back
            📦 Restored from: ${{ steps.backup.outputs.backup_bucket }}
            🔗 Failed commit: ${{ github.sha }}
            👤 Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
