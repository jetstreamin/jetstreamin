steps:
# 1. Run NETA compliance checks (static analysis)
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    docker build -t compliance-check -f Dockerfile.compliance .
    docker run compliance-check

# 2. Build the main application Docker image
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/jetstreamin-repo/jetstreamin-app:latest', '.']

# 3. Push the image to Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/jetstreamin-repo/jetstreamin-app:latest']

# 4. Deploy the new image to our GKE cluster
- name: 'gcr.io/cloud-builders/gke-deploy'
  args:
  - run
  - --filename=k8s/deployment.yaml
  - --image=us-central1-docker.pkg.dev/$PROJECT_ID/jetstreamin-repo/jetstreamin-app:latest
  - --location=us-central1-a
  - --cluster=jetstreamin-cluster

# 5. Debugging steps
- name: 'gcr.io/google-cloud-sdk/cloud-sdk'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    gcloud container clusters get-credentials jetstreamin-cluster --zone us-central1-a --project $PROJECT_ID
    echo "--- Describing deployment ---"
    kubectl describe deployment jetstreamin-deployment
    echo "--- Getting pods ---"
    kubectl get pods -l app=jetstreamin
    echo "--- Waiting for pods to be created before getting logs ---"
    sleep 30
    POD_NAME=$(kubectl get pods -l app=jetstreamin -o jsonpath='{.items[0].metadata.name}')
    if [ -n "$POD_NAME" ]; then
      echo "--- Getting logs for pod: $POD_NAME ---"
      kubectl logs $POD_NAME
    else
      echo "Could not find pod to get logs from."
    fi


images:
- 'us-central1-docker.pkg.dev/$PROJECT_ID/jetstreamin-repo/jetstreamin-app:latest'

options:
  logging: CLOUD_LOGGING_ONLY
