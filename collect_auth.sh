#!/bin/bash
#
# Jetstreamin GCP Authorization & Configuration Collector (v3 - Autofilled)
# Agent: ATM
# Purpose: To collect necessary data, establish required connections, and receive 
#          explicit user authorization for autonomous deployment on GCP.
#

# --- Hardcoded Configuration ---
GCP_PROJECT_ID="gen-lang-client-0854112426"
GITHUB_OWNER="jetstreamin"
GITHUB_REPO="skatechurch"

# --- Cyphermorph Presentation Layer ---
echo "
+----------------------------------------------------------+
|   JETSTREAMIN :: GCP AUTHORIZATION & CONFIG COLLECTOR    |
+----------------------------------------------------------+
| Agent: ATM                                               |
| Operator: Michael J. Mahon                               |
|                                                          |
| Using Autofilled Defaults:                               |
| GCP Project: ${GCP_PROJECT_ID}                         |
| GitHub Repo: ${GITHUB_OWNER}/${GITHUB_REPO}                  |
+----------------------------------------------------------+
"

# --- Prerequisite Validation ---

# 1. Set and Prepare GCP Project
echo "[1/4] Setting active GCP project..."
gcloud config set project $GCP_PROJECT_ID
if [ $? -ne 0 ]; then
    echo "FATAL: Failed to set GCP project. Please check the ID and your permissions."
    exit 1
fi
echo "Active project set successfully."
echo

# 2. Enable GCP Services
echo "[2/4] Enabling required GCP services (this may take a few minutes)..."
gcloud services enable \
    container.googleapis.com \
    artifactregistry.googleapis.com \
    secretmanager.googleapis.com \
    firestore.googleapis.com \
    cloudbuild.googleapis.com
if [ $? -ne 0 ]; then
    echo "FATAL: Failed to enable required GCP services. Please check your permissions."
    exit 1
fi
echo "All necessary GCP services are enabled."
echo

# 3. Connect Cloud Build Repository
echo "[3/4] Checking for existing Cloud Build trigger..."
TRIGGER_NAME="jetstreamin-main-branch-trigger"
if gcloud builds triggers describe ${TRIGGER_NAME} --region=us-central1 &>/dev/null; then
    echo "Cloud Build trigger '${TRIGGER_NAME}' already exists. Skipping creation."
else
    echo "Trigger not found. Attempting to create it now..."
    echo "NOTE: This may open a browser for GitHub authorization if not already configured."
    
    # Define the full repository resource path for the 2nd gen connection
    GCP_REPOSITORY_RESOURCE="projects/${GCP_PROJECT_ID}/locations/us-central1/connections/jetstreamin-gcp/repositories/jetstreamin-skatechurch"

    gcloud builds triggers create github \
      --name="${TRIGGER_NAME}" \
      --repository="${GCP_REPOSITORY_RESOURCE}" \
      --branch-pattern="^master$" \
      --build-config="cloudbuild.yaml" \
      --description="Jetstreamin main branch CI/CD trigger"

    if [ $? -ne 0 ]; then
        echo
        echo "FATAL: Failed to create the Cloud Build trigger due to an 'INVALID_ARGUMENT'."
        echo "This usually means one of two things:"
        echo "1. The repository 'https://github.com/${GITHUB_OWNER}/${GITHUB_REPO}' does not exist."
        echo "2. The Google Cloud Build app does not have permission to access this repository."
        echo
        echo "ACTION REQUIRED: Please go to https://github.com/settings/installations and ensure"
        echo "the 'Google Cloud Build' app is installed and has access to the '${GITHUB_REPO}' repository."
        echo
        echo "Halting."
        exit 1
    else
        echo
        echo "SUCCESS: The Cloud Build trigger '${TRIGGER_NAME}' was created."
    fi
fi
echo "Repository connection confirmed."
echo

# 4. Confirm Secret Manager Creation
echo "[4/4] Have you created the 'youtube-token-json' secret in GCP Secret Manager"
echo "      and populated it with the content of your youtube_token.json file?"
read -p "(yes/no): " SECRET_CONFIRMED
if [[ ! "$SECRET_CONFIRMED" =~ ^[Yy][Ee][Ss]$ ]]; then
    echo "ACTION REQUIRED: Please create the specified secret in GCP Secret Manager."
    echo "Halting authorization. The system cannot function without this credential."
    exit 1
fi
echo "Secret creation confirmed."
echo

# --- Configuration Generation ---
CONFIG_FILE="jetstreamin.env"
echo "Generating configuration file: $CONFIG_FILE"
echo "# Jetstreamin Environment Configuration - Generated by ATM" > $CONFIG_FILE
echo "export GCP_PROJECT_ID=${GCP_PROJECT_ID}" >> $CONFIG_FILE
echo "Configuration file created successfully."
echo

# --- Final Authorization Gate (Section XI Compliance) ---
echo "+==================================================================+"
echo "| FINAL AUTHORIZATION REQUIRED                                     |"
echo "+==================================================================+"
echo "| You are about to grant Jetstreamin authorization to provision    |"
echo "| and manage live, billable resources on GCP.                      |"
echo "| To confirm, type the exact phrase: AUTHORIZE-EXECUTION           |"
echo "+==================================================================+"
read -p "Awaiting authorization: " FINAL_AUTH

if [ "$FINAL_AUTH" == "AUTHORIZE-EXECUTION" ]; then
    echo
    echo "AUTHORIZATION GRANTED. Michael J. Mahon."
    echo "The next step is to run the main deployment script: ./deploy_gcp.sh"
    exit 0
else
    echo
    echo "AUTHORIZATION DENIED. Execution halted."
    exit 1
fi
